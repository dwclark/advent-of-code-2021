(defpackage :day-03 (:use :cl)
	    (:import-from :utils :read-day-file :print-assert)
	    (:import-from :alexandria :compose :iota :curry)
  (:export #:exec))
(in-package :day-03)

(defun most-common-at-position (contents pos)
  (let ((ones (reduce #'+ (mapcar #'(lambda (cont) (digit-char-p (aref cont pos))) contents))))
    (if (<= (/ (length contents) 2) ones) #\1 #\0)))

(defun char-complement (c)
  (if (char= c #\1) #\0 #\1))

(defun criteria-at-position (criteria contents pos)
  (if (= 1 (length contents))
      (first contents)
      (let* ((the-char (funcall criteria contents pos))
	     (new-contents (remove-if-not #'(lambda (s) (char= the-char (aref s pos))) contents)))
	(criteria-at-position criteria new-contents (1+ pos)))))

(defun exec ()
  (let* ((contents (read-day-file "03"))
	 (most (map 'string (curry #'most-common-at-position contents) (iota (length (first contents)) :start 0)))
	 (least (map 'string #'char-complement most))
	 (p-1 (* (parse-integer most :radix 2) (parse-integer least :radix 2)))
	 (ox (criteria-at-position #'most-common-at-position contents 0))
	 (co2 (criteria-at-position (compose #'char-complement #'most-common-at-position) contents 0))
	 (p-2 (* (parse-integer ox :radix 2) (parse-integer co2 :radix 2))))
    (print-assert "Part 1:" p-1 4138664)
    (print-assert "Part 2:" p-2 4273224)))
